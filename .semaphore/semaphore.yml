version: v1.0
name: Decko Standard
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
global_job_config:
  env_vars:
    - name: BUNDLE_PATH
      value: "~/bundle/"
  secrets:
    - name: s3-credentials
    - name: code-climate
  prologue:
    commands:
      - checkout # semaphore does git checkout and cds into card-mods
      - sem-version ruby 3.0.1
      - gem install bundler:2.3.11
      - alias be='bundle exec'
      - cp .semaphore/Gemfile .
      - git submodule update --init --recursive

      - cache restore bundle-gems
      - bundle update # note: gem updates can cause failures
      - cache store bundle-gems ~/bundle

      - sem-service start mysql

      - be decko new monkey --monkey
      - cp .semaphore/Gemfile monkey
      - cp .semaphore/.rspec monkey
      - cd monkey
      - bundle lock # new Gemfile.lock in deck (gems are already installed above)
      - be decko setup
      - be decko update
      - be rake card:eat -- -t all

blocks:
  - name: Unit Tests
    task:
      env_vars:
        - name: COVERAGE
          value: 'false'


      jobs:
        - name: RSpec
          commands:
            - be decko rspec -s
      epilogue:
        always:
          commands:
            - test-results publish junit.xml

  - name: Integration Tests
    task:
      secrets:
        - name: cardmods-cypress
      env_vars:
        - name: RAILS_ENV
          value: cypress
      prologue:
        commands:
          - cp ../.semaphore/cypress.json .
          - cp ../.semaphore/decko/decko/spec/package.json .
          - cp -R ../.semaphore/decko/decko/spec/cypress .
          - be decko server -p 5002 &
          - nvm use 16.0.0
          - yarn install

      jobs:
        - name: Cypress
          commands:
            # --key should not be necessary. secrets not working
            - yarn run cypress run --record --key 8854bd4e-ad0c-4f67-82dd-d90cbc43b96f

      epilogue:
        always:
          commands:
            - test-results publish /home/semaphore/reports/*.xml

after_pipeline:
  task:
    jobs:
      - name: Publish Results
        commands:
          - test-results gen-pipeline-report
